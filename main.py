import telebot
import os
import asyncio
import time
from Classes.classes import Dish
from config import TOKEN, db, APP_URL
from telebot import types
from pyrogram.errors import FloodWait
from flask import Flask, request

bot = telebot.TeleBot(TOKEN)
# server = Flask(__name__)
user_dict = {}

@bot.message_handler(commands=['start'])
def welcome(message):
    """Welcoming func"""
    # keyboard
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    button1 = types.KeyboardButton("–ü–∞–∫–µ—Ç—ãüë•")
    button2 = types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–ºüë•")
    button3 = types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—éüë•")
    button4 = types.KeyboardButton("Helpüë•")

    markup.row(button2)
    markup.row(button3)
    markup.row(button1, button4)

    msg = bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –µ—Å—Ç—å? –¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞!", reply_markup=markup)
    bot.register_next_step_handler(msg, user_choice)


@bot.message_handler(content_types=['text'])
def user_choice(message):

    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –µ—Å—Ç—å? –¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞!")
    if message.text == '–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–ºüë•':
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≥–æ—Ç–æ–≤–∏—Ç—å!")
        bot.register_next_step_handler(msg, product_input)
    elif message.text == '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—éüë•':
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ –∏—â–µ—Ç–µ!")
        bot.register_next_step_handler(msg, find_meal)
    elif message.text == '–ü–∞–∫–µ—Ç—ãüë•':
        c = bot.send_message(message.chat.id, "3")
        # bot.register_next_step_handler(c, packages)
    elif message.text == 'Helpüë•':
        d = bot.send_message(message.chat.id, "4")
        # bot.register_next_step_handler(d, help)


@bot.message_handler(content_types=['text'])
def product_input(message):
    bot.reply_to(message, '–í–æ—Ç –≤–∞—à –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:')
    search_by_ingredient = Dish()
    search_by_ingredient.ingredient = message.text.lower()
    user_dict['ingredient_object'] = search_by_ingredient
    records = search_by_ingredient.get_ingredient()
    if len(records) <= 0:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –±–ª—é–¥ c —Ç–∞–∫–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(((")
    else:
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞:", reply_markup=keyboard_for_category())


def keyboard_for_category():
    buttons = [
        [types.InlineKeyboardButton(text="–ü–µ—Ä–≤–æ–µ", callback_data='–ü–µ—Ä–≤–æ–µ')],
        [types.InlineKeyboardButton(text="–í—Ç–æ—Ä–æ–µ", callback_data='–í—Ç–æ—Ä–æ–µ')],
        [types.InlineKeyboardButton(text="–ù–∞–ø–∏—Ç–∫–∏", callback_data='–ù–∞–ø–∏—Ç–∫–∏')],
        [types.InlineKeyboardButton(text="–ó–∞–∫—É—Å–∫–∏", callback_data='–ó–∞–∫—É—Å–∫–∏')],
        [types.InlineKeyboardButton(text="–î–µ—Å–µ—Ä—Ç", callback_data='–î–µ—Å–µ—Ä—Ç')]
    ]
    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in ['–ü–µ—Ä–≤–æ–µ', '–í—Ç–æ—Ä–æ–µ', '–ù–∞–ø–∏—Ç–∫–∏', '–ó–∞–∫—É—Å–∫–∏', '–î–µ—Å–µ—Ä—Ç'])
def answer_markup_for_category(call):
    if call.data == "–ü–µ—Ä–≤–æ–µ":
        user_dict['ingredient_object'].category = 1
        records = user_dict['ingredient_object'].category_check_with_ingredient()
        if records is None:
            bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(((")
        else:
            msg = bot.send_message(call.message.chat.id, "–û–∫–µ–π, –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ!")
            bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª—é–¥–∞!", reply_markup=keyboard_for_complexity())
    elif call.data == "–í—Ç–æ—Ä–æ–µ":
        user_dict['ingredient_object'].category = 2
        records = user_dict['ingredient_object'].category_check_with_ingredient()
        if records is None:
            bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(((")
        else:
            msg = bot.send_message(call.message.chat.id, "–û–∫–µ–π, –±–µ—Ä—ë–º –≤—Ç–æ—Ä–æ–µ!")
            bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª—é–¥–∞!", reply_markup=keyboard_for_complexity())
    elif call.data == "–ù–∞–ø–∏—Ç–∫–∏":
        user_dict['ingredient_object'].category = 3
        records = user_dict['ingredient_object'].category_check_with_ingredient()
        if records is None:
            bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(((")
        else:
            msg = bot.send_message(call.message.chat.id, "–û–∫–µ–π, –±–µ—Ä—ë–º –Ω–∞–ø–∏—Ç–∫–∏!")
            bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª—é–¥–∞!", reply_markup=keyboard_for_complexity())
    elif call.data == "–ó–∞–∫—É—Å–∫–∏":
        user_dict['ingredient_object'].category = 4
        records = user_dict['ingredient_object'].category_check_with_ingredient()
        if records is None:
            bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(((")
        else:
            msg = bot.send_message(call.message.chat.id, "–û–∫–µ–π, –±–µ—Ä—ë–º –∑–∞–∫—É—Å–∫–∏!")
            bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª—é–¥–∞!", reply_markup=keyboard_for_complexity())
    elif call.data == "–î–µ—Å–µ—Ä—Ç":
        user_dict['ingredient_object'].category = 5
        records = user_dict['ingredient_object'].category_check_with_ingredient()
        if records is None:
            bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(((")
        else:
            msg = bot.send_message(call.message.chat.id, "–û–∫–µ–π, –±–µ—Ä—ë–º –¥–µ—Å–µ—Ä—Ç—ã!")
            bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª—é–¥–∞!", reply_markup=keyboard_for_complexity())
    bot.answer_callback_query(call.id)


def keyboard_for_complexity():
    buttons = [
        [types.InlineKeyboardButton(text="–ß–∞–π–Ω–∏–∫", callback_data='easy')],
        [types.InlineKeyboardButton(text="–û–ø—ã—Ç–Ω—ã–π", callback_data='medium')],
        [types.InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä-—à–µ—Ñ", callback_data='hard')]
    ]
    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in ['easy', 'medium', 'hard'])
def answer_markup_for_category(call):
    if call.data == 'easy':
        user_dict['ingredient_object'].complexity = 1
        records = user_dict['ingredient_object'].category_check_with_ingredient_and_complexity()
        if records is None:
            bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –±–ª—é–¥–æ —ç –≤–≤–µ–¥—ë–Ω–Ω—ã–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º, –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(((")
        else:
            names = get_list_out_of_fetchall(records)
            user_dict['found_dishes_by_name'] = names
            bot.send_message(call.message.chat.id, "–í–æ—Ç –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:", reply_markup=dish_names_keyboard(records))
    elif call.data == 'medium':
        user_dict['ingredient_object'].complexity = 2
        records = user_dict['ingredient_object'].category_check_with_ingredient_and_complexity()
        if records is None:
            bot.send_message(call.message.chat.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –±–ª—é–¥–æ —ç –≤–≤–µ–¥—ë–Ω–Ω—ã–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º, –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(((")
        else:
            names = get_list_out_of_fetchall(records)
            user_dict['found_dishes_by_name'] = names
            bot.send_message(call.message.chat.id, "–í–æ—Ç –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:",
                             reply_markup=dish_names_keyboard(records))
    elif call.data == 'hard':
        user_dict['ingredient_object'].complexity = 3
        records = user_dict['ingredient_object'].category_check_with_ingredient_and_complexity()
        if records is None:
            bot.send_message(call.message.chat.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –±–ª—é–¥–æ —ç –≤–≤–µ–¥—ë–Ω–Ω—ã–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º, –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(((")
        else:
            names = get_list_out_of_fetchall(records)
            user_dict['found_dishes_by_name'] = names
            bot.send_message(call.message.chat.id, "–í–æ—Ç –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:",
                             reply_markup=dish_names_keyboard(records))
    bot.answer_callback_query(call.id)



################################################

@bot.message_handler(content_types=['text'])
def find_meal(message):
    bot.reply_to(message, '–í–æ—Ç –≤–∞—à–µ –±–ª—é–¥–æ:')
    search_by_name = Dish()
    search_by_name.name = message.text.lower()
    user_dict['dish_by_name_object'] = search_by_name
    records = search_by_name.get_name()
    names = get_list_out_of_fetchall(records)
    user_dict['found_dishes_by_name'] = names
    if len(records) <= 0:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–æ–µ –±–ª—é–¥–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(((")
    else:
        bot.send_message(message.chat.id, text="–í–æ—Ç –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–∞—à–ª–∏:", reply_markup=dish_names_keyboard(records))



def get_list_out_of_fetchall(records):

    names = []
    for pair in records:
        names.append(pair[0])
    return names


def dish_names_keyboard(names):
    ids = []
    buttons = []
    for value in names:
        id = Dish.get_id(value[0])
        buttons.append([types.InlineKeyboardButton(text=value[0], callback_data=str(id[0][0]))])
        ids.append(str(id[0][0]))
    user_dict['ids'] = ids
    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in user_dict['ids'])
def answer_markup_for_name(call):

    final_dish = Dish()
    final_dish.id = call.data
    user_dict['dish_by_name_object'] = final_dish
    records = final_dish.get_recipe()
    user_dict['recipe_by_name'] = records[0][0]
    recipe = bot.send_message(call.message.chat.id, text=user_dict['recipe_by_name'])
    msg = bot.send_message(recipe.chat.id, text="–í–æ—Ç –≤–µ—Å—å —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞")
    bot.send_message(msg.chat.id, text="–ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –≥–æ—Ç–æ–≤–∫—É?", reply_markup=keyboard_for_timer())
    bot.answer_callback_query(call.id)


def keyboard_for_timer():
    buttons = [
        [types.InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="start timer")],
        [types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–∏—Ç—å –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞", callback_data='no')]
    ]
    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in ['start timer', 'no'])
def answer_markup_for_recipe(call):
    if call.data == "no":
        bot.send_message(call.message.chat.id, "–£–¥–∞—á–Ω–æ–π –≥–æ—Ç–æ–≤–∫–∏!")
    elif call.data == "start timer":
        msg = bot.send_message(call.message.chat.id, "–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø–æ—à–∞–≥–æ–≤–æ–º—É –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é!")
        # start_timer(msg)
        bot.answer_callback_query(call.id)





# async def start_timer(message):
#     records = user_dict['dish_by_name_object'].get_recipe_steps()
#     for pair in records:
#         step_time = pair[1]
#         msg = bot.send_message(message.chat.id, text=pair[0])
#         new_msg = bot.send_message(msg.chat.id, text="Your time is at:" + step_time)
#         for seconds_left in range(step_time - 1, -1, -1):
#             await asyncio.sleep(1)
#             bot.edit_message_text(new_msg.chat.id, message_id=new_msg.message_id, text="Your time is at:" + seconds_left)



#     # for pair in records:
#     #     step_time = pair[1]
#     #     while step_time and not stoptimer:
#     #         s = step_time % 60
#     #         Countdown_TeLe_TiPs = bot.send_message(message, "Startin the timer")
#     #         finish_msg = bot.send_message(Countdown_TeLe_TiPs.chat.id, "")
#     #         await asyncio.sleep(1)
#     #         step_time -= 1
#     #     bot.send_message(finish_msg.chat.id, "üö® Beep! Beep!! **TIME'S UP!!!**")
#
#
# @bot.message_handler(commands=['stop_timer'])
# def stop_timer(message):
#     global stoptimer
#     stoptimer = True
#     bot.reply_to(message, "–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")






bot.polling()

# @bot.message_handler(content_types='text')
# def echo(message: types.Message):
#     bot.send_message(message.from_user.id, message.text)


# @server.route('/' + TOKEN, methods=['POST'])
# def get_message():
#     json_string = request.get_data().decode("utf-8")
#     update = types.Update.de_json(json_string)
#     bot.process_new_updates([update])
#     return "Ok", 200
#

# @server.route('/')
# def webhook():
#     bot.delete_webhook()
#     # bot.remove_webhook()
#     # bot.set_webhook(url=APP_URL)
#     return "Ok", 200


#
# if __name__ == '__main__':
#     server.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
